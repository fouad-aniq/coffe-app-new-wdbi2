
package ai.shreds.infrastructure.repositories;\n\nimport ai.shreds.domain.entities.DomainEntityCategory;\nimport ai.shreds.domain.ports.DomainPortCategoryRepository;\nimport ai.shreds.infrastructure.entities.InfrastructureCategoryEntity;\nimport ai.shreds.infrastructure.exceptions.InfrastructureExceptionCategory;\nimport ai.shreds.infrastructure.repositories.JpaCategoryRepository;\nimport ai.shreds.infrastructure.utils.InfrastructureCategoryEntityMapper;\nimport ai.shreds.shared.SharedCategoryFilterCriteria;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Repository\npublic class InfrastructureRepositoryCategoryImpl implements DomainPortCategoryRepository {\n\n    private final JpaCategoryRepository categoryRepository;\n    private final InfrastructureCategoryEntityMapper categoryMapper;\n\n    @Autowired\n    public InfrastructureRepositoryCategoryImpl(JpaCategoryRepository categoryRepository,\n                                                InfrastructureCategoryEntityMapper categoryMapper) {\n        this.categoryRepository = categoryRepository;\n        this.categoryMapper = categoryMapper;\n    }\n\n    @Override\n    public DomainEntityCategory save(DomainEntityCategory category) {\n        try {\n            InfrastructureCategoryEntity entity = categoryMapper.toInfrastructure(category);\n            InfrastructureCategoryEntity savedEntity = categoryRepository.save(entity);\n            return categoryMapper.toDomain(savedEntity);\n        } catch (DataAccessException e) {\n            throw new InfrastructureExceptionCategory(\"Error saving category\", e);\n        }\n    }\n\n    @Override\n    public Optional<DomainEntityCategory> findById(UUID categoryId) {\n        try {\n            Optional<InfrastructureCategoryEntity> entityOptional = categoryRepository.findById(categoryId);\n            return entityOptional.map(categoryMapper::toDomain);\n        } catch (DataAccessException e) {\n            throw new InfrastructureExceptionCategory(\"Error finding category by ID\", e);\n        }\n    }\n\n    @Override\n    public List<DomainEntityCategory> findAll(SharedCategoryFilterCriteria filter) {\n        try {\n            Pageable pageable = PageRequest.of(filter.getPage(), filter.getSize());\n            List<InfrastructureCategoryEntity> entities = categoryRepository.findAll(pageable).getContent();\n            return entities.stream()\n                    .map(categoryMapper::toDomain)\n                    .collect(Collectors.toList());\n        } catch (DataAccessException e) {\n            throw new InfrastructureExceptionCategory(\"Error finding all categories\", e);\n        }\n    }\n\n    @Override\n    public List<DomainEntityCategory> findByParentCategoryId(UUID parentCategoryId) {\n        try {\n            List<InfrastructureCategoryEntity> entities = categoryRepository.findByParentCategoryId(parentCategoryId);\n            return entities.stream()\n                    .map(categoryMapper::toDomain)\n                    .collect(Collectors.toList());\n        } catch (DataAccessException e) {\n            throw new InfrastructureExceptionCategory(\"Error finding categories by parent category ID\", e);\n        }\n    }\n\n    @Override\n    public List<DomainEntityCategory> findByTagsIn(List<String> tags) {\n        try {\n            List<InfrastructureCategoryEntity> entities = categoryRepository.findByTagsIn(tags);\n            return entities.stream()\n                    .map(categoryMapper::toDomain)\n                    .collect(Collectors.toList());\n        } catch (DataAccessException e) {\n            throw new InfrastructureExceptionCategory(\"Error finding categories by tags\", e);\n        }\n    }\n\n    @Override\n    public void deleteById(UUID categoryId) {\n        try {\n            categoryRepository.deleteById(categoryId);\n        } catch (DataAccessException e) {\n            throw new InfrastructureExceptionCategory(\"Error deleting category by ID\", e);\n        }\n    }\n\n    @Override\n    public void delete(DomainEntityCategory category) {\n        try {\n            InfrastructureCategoryEntity entity = categoryMapper.toInfrastructure(category);\n            categoryRepository.delete(entity);\n        } catch (DataAccessException e) {\n            throw new InfrastructureExceptionCategory(\"Error deleting category\", e);\n        }\n    }\n\n    @Override\n    public boolean existsById(UUID categoryId) {\n        try {\n            return categoryRepository.existsById(categoryId);\n        } catch (DataAccessException e) {\n            throw new InfrastructureExceptionCategory(\"Error checking if category exists by ID\", e);\n        }\n    }\n}\n